x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-10,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-20,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-30,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-50,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-5,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-3,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-2,length=200)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(0,-3,length=300)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
coef(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(11,-3,length=300)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(1,-3,length=300)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(1,-4,length=300)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(1,-3,length=300)
set.seed(42)
cv.lasso.1 <- cv.glmnet(x, reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
lasso.mod <- glmnet(x, reds$quality, alpha = 1, lambda = 0.0001)
lasso.mod <- glmnet(x, reds_train$quality, alpha = 1, lambda = 0.0001)
coef(lasso.mod)
model.lr <- lm(quality ~. , data=reds_train)
coef(model.lr)
lasso.mod <- glmnet(x, reds_train$quality, alpha = 1, lambda = 0.01)
coef(lasso.mod)
?scale
scale(x)
lasso.mod <- glmnet(scale(x), reds_train$quality, alpha = 1, lambda = 0.01)
coef(lasso.mod)
lasso.mod <- glmnet(scale(x), reds_train$quality, alpha = 1, lambda = 0.0001)
coef(lasso.mod)
model.lr <- lm(quality ~. , data=reds_train)
coef(model.lr)
x <- model.matrix(quality ~ ., reds_train)[, -1]
grid <- 10^seq(1,-3,length=300)
set.seed(42)
cv.lasso.1 <- cv.glmnet(scale(x), reds_train$quality, nfolds = 10, alpha = 1, lambda = grid)
cv.lasso.1$lambda.min
plot(cv.lasso.1)
lasso.mod <- glmnet(scale(x), reds_train$quality, alpha = 1, lambda = cv.lasso.1$lambda.min)
coef(lasso.mod)
model.lr <- lm(quality ~. , data=reds_train)
coef(model.lr)
?pcr
model.PCR.final <- pcr(quality~ ., reds_train, ncomp=3, scale = T, center = T)
model.PCR.final <- pcr(quality ~ ., data = reds_train, ncomp=3, scale = T, center = T)
Yhat_PCR <- predict(model.PCR.final, newdata = reds_test[Z,])
Yhat_lasso = predict(lasso.mod, cv.lasso.mod$lambda.min, newx=scale(reds_test[Z,]) )
reds_test[Z,]
Yhat_PCR <- predict(model.PCR.final, newdata = reds_test)
Yhat_lasso = predict(lasso.mod, cv.lasso.mod$lambda.min, newx=scale(reds_test) )
reds_test
Yhat_PCR <- predict(model.PCR.final, newdata = reds_test[,1:11])
Yhat_lasso = predict(lasso.mod, cv.lasso.mod$lambda.min, newx=scale(reds_test[,1:11]) )
sqrt(mean((Yhat_PCR - reds_test$quality)^2))
sqrt(mean((Yhat_lasso - reds_test$quality)^2))
model.PCR.final <- pcr(quality ~ ., data = reds_train, ncomp=4, scale = T, center = T)
sqrt(mean((Yhat_PCR - reds_test$quality)^2))
Yhat_PCR <- predict(model.PCR.final, newdata = reds_test[,1:11])
sqrt(mean((Yhat_PCR - reds_test$quality)^2))
model.PCR.final <- pcr(quality ~ ., data = reds_train, ncomp=5, scale = T, center = T)
Yhat_PCR <- predict(model.PCR.final, newdata = reds_test[,1:11])
sqrt(mean((Yhat_PCR - reds_test$quality)^2))
sqrt(mean((Yhat_lasso - reds_test$quality)^2))
model.PCR.final <- pcr(quality ~ ., data = reds_train, ncomp=5, scale = T, center = T)
lasso.mod <- glmnet(scale(x), reds_train$quality, alpha = 1, lambda = cv.lasso.1$lambda.min)
Yhat_PCR <- predict(model.PCR.final, newdata = reds_test[,1:11])
Yhat_lasso <- predict(lasso.mod, cv.lasso.mod$lambda.min, newx=scale(reds_test[,1:11]) )
sqrt(mean((Yhat_PCR - reds_test$quality)^2))
sqrt(mean((Yhat_lasso - reds_test$quality)^2))
# correlation plot
res <- cor(reds)
corrplot(res, method = "shade", type="upper", tl.col = "black")
source(here::here("R", "Setup.R"))
corrplot(res, method = "shade", type="upper", tl.col = "black")
# correlation plot
res <- cor(reds)
corrplot(res, method = "shade", type="upper", tl.col = "black")
# correlation plot
res <- cor(reds)
n = nrow(reds)
set.seed(42)
Z <- sample(n,n/10)
reds_test = reds[Z,]
reds_train = reds[-Z,]
# correlation plot
res <- cor(reds_train)
corrplot(res, method = "shade", type="upper", tl.col = "black")
corrplot::corrplot(res, method = "shade", type="upper", tl.col = "black")
heart_data <-read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",
show_col_types = FALSE)
heart_data <-read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",
show_col_types = FALSE,
col_names = F)
heart_data <- mutate(
age = X1
)
heart_data <- mutate(
rename(X1,"Age")
)
heart_data <- mutate(
rename("X1","Age")
)
heart_data <- mutate(
rename(Age = X1)
)
heart_data <-read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",
show_col_types = FALSE,
col_names = F)
heart_data <- mutate(
rename(Age = X1)
)
heart_data %>% mutate(
rename(Age = X1)
)
heart_data = as.tibble(heart_data)
heart_data %>% mutate(
rename(Age = X1)
)
names(heart_data) =
c("Age",
"Sex")
names(heart_data) =
c("Age",
"Sex",
"CP",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"num")
heart_data%>% mutate(ca = as.numeric(ca), thal = as.numeric(thal))
heart_data%>% mutate(ca = as.numeric(ca), thal = as.numeric(thal)) %>% filter(!is.na(ca), !is.na(thal))
heart_data %>%
mutate(ca = as.numeric(ca), thal = as.numeric(thal)) %>%
filter(!is.na(ca), !is.na(thal)) -> heart_data
dim(heart_data)
n = nrow(heart_data)
set.seed(42)
Z <- sample(n,n/10)
heart_test = heart_data[Z,]
heart_train = heart_data[-Z,]
res <- cor(heart_train)
res <- cor(heart_train)
corrplot(res)
res <- cor(heart_train)
corrplot::corrplot(res, method = "shade", type="upper", tl.col = "black")
suppressPackageStartupMessages(library(e1071))
?svm()
?tune()
names(heart_data) =
c("Age",
"Sex",
"CP",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"Number")
n = nrow(heart_data)
set.seed(42)
Z <- sample(n,n/10)
heart_test = heart_data[Z,]
heart_train = heart_data[-Z,]
res <- cor(heart_train)
corrplot::corrplot(res, method = "shade", type="upper", tl.col = "black")
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(.05,5,.05))
rg
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg)
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(.1,5,.1))
rg
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg)
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(.1,3,.1))
rg
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg)
svmt
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100))
rg
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg)
svmt
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100))
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg)
rg2 <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(0.01, .2, 0.01))
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg2)
svmt
?tune()
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100))
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg)
svmt
rg2 <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(0.01, .2, 0.01))
svmt <- tune(svm, Number ~ .,data=heart_train, ranges = rg2)
svmt
predict(svmt, newdata=heart_test[,1:13])
svm.tuned <- svm(Number ~ ., kernel = "linear", cost = 0.06, data=heart_train)
predict(svm.tuned, newdata=heart_test[,1:13])
predict(svm.tuned, newdata = heart_test[,1:13])
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg)
svmt
rg2 <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(0.01, .2, 0.01))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg2)
svmt
svm.tuned <- svm(Number ~ ., kernel = "linear", cost = 0.06, data=heart_train)
predict(svm.tuned, newdata = heart_test[,1:13])
svm.tuned <- svm(factor(Number) ~ ., kernel = "linear", cost = 0.14, data=heart_train)
predict(svm.tuned, newdata = heart_test[,1:13])
count(heart_data$Number)
heart_data %>% count(Number)
heart_data <-read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",
show_col_types = FALSE,
col_names = F)
heart_data %>%
mutate(Number = recode(`2` = 1,
`3` = 1,
`4` = 1)) %>% head()
names(heart_data) =
c("Age",
"Sex",
"CP",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"Number")
heart_data %>%
mutate(Number = recode(`2` = 1,
`3` = 1,
`4` = 1)) %>% head()
heart_data %>%
mutate(ca = as.numeric(ca), thal = as.numeric(thal)) %>%
filter(!is.na(ca), !is.na(thal)) -> heart_data
dim(heart_data)
heart_data %>%
mutate(Number = recode(`2` = 1,
`3` = 1,
`4` = 1)) %>% head()
heart_data %>%
mutate(ca = as.numeric(ca), thal = as.numeric(thal)) %>%
filter(!is.na(ca), !is.na(thal)) -> heart_data
dim(heart_data)
# Another consideration: flattening the response variable to a binary (0 = no heart disease,
# 1 = heart disease) setting
heart_data %>%
mutate(Number = recode(Number,
`2` = 1,
`3` = 1,
`4` = 1)) %>% head()
heart_data %>%
mutate(ca = as.numeric(ca), thal = as.numeric(thal)) %>%
filter(!is.na(ca), !is.na(thal)) -> heart_data
dim(heart_data)
# Another consideration: flattening the response variable to a binary (0 = no heart disease,
# 1 = heart disease) setting
heart_data %>%
mutate(Number = recode(Number,
`2` = 1,
`3` = 1,
`4` = 1)) -> heart_data
n = nrow(heart_data)
set.seed(42)
Z <- sample(n,n/10)
heart_test = heart_data[Z,]
heart_train = heart_data[-Z,]
res <- cor(heart_train)
corrplot::corrplot(res, method = "shade", type="upper", tl.col = "black")
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg)
svmt
rg2 <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(0.01, .2, 0.01))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg2)
svmt
svm.tuned <- svm(factor(Number) ~ ., kernel = "linear", cost = 0.08, data=heart_train)
predict(svm.tuned, newdata = heart_test[,1:13])
# A third consideration
heart_data %>%
mutate(Sex = factor(Sex),
cp = factor(cp),
restecg = factor(rest_ecg),
exang = factor(exang),
slope = factor(slope),
thal = factor(thal))
# A third consideration
heart_data %>%
mutate(Sex = factor(Sex),
CP = factor(CP),
restecg = factor(rest_ecg),
exang = factor(exang),
slope = factor(slope),
thal = factor(thal))
# A third consideration
heart_data %>%
mutate(Sex = factor(Sex),
CP = factor(CP),
restecg = factor(restecg),
exang = factor(exang),
slope = factor(slope),
thal = factor(thal))
heart_data %>%
mutate(Number = recode(Number,
`2` = 1,
`3` = 1,
`4` = 1)) -> heart_data
# A third consideration
heart_data %>%
mutate(Sex = factor(Sex),
CP = factor(CP),
restecg = factor(restecg),
exang = factor(exang),
slope = factor(slope),
thal = factor(thal)) ->heart_data
heart_data %>%
mutate(ca = as.numeric(ca), thal = as.numeric(thal)) %>%
filter(!is.na(ca), !is.na(thal)) -> heart_data
dim(heart_data)
n = nrow(heart_data)
set.seed(42)
Z <- sample(n,n/10)
heart_test = heart_data[Z,]
heart_train = heart_data[-Z,]
res <- cor(heart_train)
set.seed(42)
rg <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg)
svmt
rg2 <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(5, 50, 1))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg2)
svmt
rg2 <- list(kernel=c("linear","polynomial","radial","sigmoid"), cost=seq(5, 15, 0.5))
svmt <- tune(svm, factor(Number) ~ .,data=heart_train, ranges = rg2)
svmt
svm.tuned <- svm(factor(Number) ~ ., kernel = "linear", cost = 5.5, data=heart_train)
predict(svm.tuned, newdata = heart_test[,1:13])
yhat = predict(svm.tuned, newdata = heart_test[,1:13])
class <- data.frame(yhat = yhat,y = heart_test$Num)
table(class)
class <- data.frame(yhat = yhat,y = heart_test$Number)
table(class)
pred <- prediction(yhat,heart_test$Number)
library(ROCR)
suppressPackageStartupMessages(library(ROCR))
pred <- prediction(yhat,heart_test$Number)
pred <- prediction(yhat,heart_test$Number)
pred <- prediction(yhat==1,heart_test$Number==1)
pred <- prediction(as.numeric(yhat==1),as.numeric(heart_test$Number==1))
pred <- prediction(as.numeric(yhat==1),as.numeric(heart_test$Number==1))
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=T,lwd=2)
perf <- performance(pred,"auc")
plot(perf,colorize=T,lwd=2)
perf <- performance(pred,"auc")
perf
pred <- prediction(as.numeric(yhat==1),as.numeric(heart_test$Number==1))
perf <- performance(pred,"auc")
perf
perf <- performance(pred,"auc")@y.values
perf
model.log <- glm(factor(Number) ~., data=heart_train)
model.log <- glm(Number ~., data=heart_train)
summary(model.log)
ggplot(heart_train) +
geom_point(aes(x= thalach, y = chol, color=factor(Number)))
ggplot(heart_train) +
geom_point(aes(x= trestbps, y = chol, color=factor(Number)))
ggplot(heart_train) +
geom_point(aes(x= thalach, y = trestbps, color=factor(Number)))
heart_data %>% mutate(
rename(Age = X1)
)
heart_data
heart_data <-read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",
show_col_types = FALSE,
col_names = F)
heart_data = as.tibble(heart_data)
heart_data <-read_delim("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data",
show_col_types = FALSE,
col_names = F)
heart_data
heart_data %>% mutate(
rename(Age = X1)
)
names(heart_data) =
c("Age",
"Sex",
"CP",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"Number")
heart_data %>%
mutate(Number = recode(Number,
`2` = 1,
`3` = 1,
`4` = 1)) -> heart_data
# A third consideration
heart_data %>%
mutate(Sex = factor(Sex),
CP = factor(CP),
restecg = factor(restecg),
exang = factor(exang),
slope = factor(slope),
thal = factor(thal)) ->heart_data
vif(model.linear)
model.linear <- lm(quality ~ ., reds_train)
vif(model.linear)
?vif
??vif
car::vif(model.linear)
plot(model.linear$fitted.values, model.linear$residuals)
table(class)
glm(factor(Number) ~ ., data=heart_train, family = "binomial")
yhat = predict(log.model, newdata= heart_test[,1:13])
log.model <- glm(factor(Number) ~ ., data=heart_train, family = "binomial")
yhat = predict(log.model, newdata= heart_test[,1:13])
yhat
yhat = predict(log.model, newdata= heart_test[,1:13], type = "response")
yhat
yhat > 0.5
log.model <- glm(factor(Number) ~ ., data=heart_train, family = "binomial")
yhat = predict(log.model, newdata= heart_test[,1:13], type = "response")
class <- data.frame(yhat = yhat > 0.5,y = heart_test$Number)
table(class)
log.model <- glm(factor(Number) ~ ., data=heart_train, family = "binomial")
yhat = predict(log.model, newdata= heart_test[,1:13], type = "response")
class <- data.frame(yhat = yhat > 0.5,y = heart_test$Number)
table(class)
log.model <- glm(factor(Number) ~ ., data=heart_train, family = "binomial")
yhat = predict(log.model, newdata= heart_test[,1:13], type = "response")
class <- data.frame(yhat = as.numeric(yhat > 0.5),y = heart_test$Number)
table(class)
